import numpy as np                                      # for numerical operations
from sklearn.decomposition import PCA                   # for Principal Component Analysis
from sklearn.linear_model import LogisticRegression     # for Logistic Regression
from sklearn.preprocessing import StandardScaler        # for feature scaling
from sklearn.model_selection import train_test_split    # for splitting the data
import joblib                                           # for saving the trained models
import os                                               # for creating directories

# This training set is a list of lists where each list represents [count, coin_radius, avg_b, avg_g, avg_r, class_label]
# I created this by adding code to project1.py which calculates:
# - the coin radius as an average of the distance from the center to the top, bottom, left, and right edges of the coin cluster
# - the average blue, green, and red values of the coin cluster
# Then I printed these values and manually added the class label based on the answer keys for each test case.
training_data = [['851', '16', '152', '152', '148', '25'], ['888', '16', '111', '113', '110', '25'], ['884', '16', '110', '110', '105', '25'], ['946', '16', '112', '112', '107', '25'], ['869', '16', '109', '106', '103', '25'], ['912', '16', '99', '100', '97', '25'], ['899', '16', '121', '120', '116', '25'], ['897', '16', '102', '101', '97', '25'], ['868', '16', '136', '134', '132', '25'], ['870', '16', '116', '113', '111', '25'], ['890', '16', '104', '102', '98', '25'], ['923', '16', '90', '89', '87', '25'], ['910', '16', '103', '102', '99', '25'], ['867', '16', '123', '122', '121', '25'], ['889', '16', '73', '67', '66', '25'], ['902', '16', '101', '98', '98', '25'], ['890', '16', '95', '96', '95', '25'], ['920', '16', '97', '86', '72', '25'], ['894', '16', '117', '104', '89', '25'], ['850', '16', '115', '102', '87', '25'], ['871', '16', '135', '116', '100', '25'], ['881', '16', '117', '101', '86', '25'], ['860', '16', '102', '89', '77', '25'], ['886', '16', '108', '93', '80', '25'], ['862', '16', '102', '90', '77', '25'], ['882', '16', '131', '114', '99', '25'], ['874', '16', '127', '110', '96', '25'], ['880', '16', '138', '120', '103', '25'], ['892', '16', '152', '129', '109', '25'], ['875', '16', '144', '123', '106', '25'], ['903', '16', '112', '98', '84', '25'], ['877', '16', '139', '118', '100', '25'], ['857', '16', '136', '116', '99', '25'], ['864', '16', '136', '116', '100', '25'], ['867', '16', '130', '110', '95', '25'], ['880', '16', '103', '88', '75', '25'], ['873', '16', '158', '131', '112', '25'], ['888', '16', '117', '98', '83', '25'], ['859', '16', '108', '89', '75', '25'], ['868', '16', '134', '112', '98', '25'], ['871', '16', '147', '122', '102', '25'], ['875', '16', '91', '75', '63', '25'], ['837', '16', '135', '113', '97', '25'], ['849', '16', '137', '115', '100', '25'], ['878', '16', '86', '71', '62', '25'], ['869', '16', '100', '85', '71', '25'], ['877', '16', '72', '61', '51', '25'], ['842', '16', '121', '100', '85', '25'], ['876', '16', '57', '46', '42', '25'], ['851', '16', '62', '50', '39', '25'], ['841', '16', '137', '112', '95', '25'], ['874', '16', '110', '92', '90', '25'], ['855', '16', '151', '125', '121', '25'], ['871', '16', '124', '101', '100', '25'], ['826', '16', '164', '132', '129', '25'], ['821', '15', '163', '131', '129', '25'], ['852', '16', '87', '62', '66', '25'], ['871', '16', '119', '92', '89', '25'], ['416', '10', '133', '139', '138', '10'], ['451', '11', '94', '102', '102', '10'], ['430', '11', '110', '117', '117', '10'], ['442', '11', '87', '97', '96', '10'], ['430', '11', '137', '146', '146', '10'], ['422', '11', '127', '136', '135', '10'], ['444', '11', '101', '107', '106', '10'], ['408', '10', '110', '117', '117', '10'], ['435', '11', '97', '105', '105', '10'], ['449', '11', '98', '110', '109', '10'], ['437', '12', '101', '104', '101', '10'], ['447', '11', '119', '126', '126', '10'], ['440', '11', '81', '80', '80', '10'], ['486', '12', '99', '108', '107', '10'], ['452', '11', '95', '104', '104', '10'], ['430', '11', '126', '137', '141', '10'], ['444', '11', '96', '99', '103', '10'], ['440', '11', '90', '96', '98', '10'], ['401', '10', '105', '110', '114', '10'], ['421', '11', '102', '107', '110', '10'], ['427', '11', '89', '97', '101', '10'], ['474', '12', '82', '97', '100', '10'], ['444', '11', '114', '93', '92', '10'], ['393', '10', '106', '82', '82', '10'], ['337', '10', '144', '119', '121', '10'], ['427', '11', '91', '71', '70', '10'], ['410', '10', '119', '91', '87', '10'], ['668', '14', '80', '88', '88', '5'], ['675', '14', '99', '105', '103', '5'], ['648', '14', '85', '92', '91', '5'], ['634', '13', '145', '152', '152', '5'], ['644', '14', '85', '85', '85', '5'], ['690', '14', '90', '100', '99', '5'], ['660', '14', '94', '97', '100', '5'], ['660', '14', '81', '83', '86', '5'], ['646', '14', '85', '94', '93', '5'], ['661', '14', '110', '113', '115', '5'], ['666', '14', '76', '84', '84', '5'], ['605', '13', '152', '147', '134', '5'], ['651', '14', '148', '146', '135', '5'], ['612', '13', '105', '102', '93', '5'], ['674', '14', '151', '143', '129', '5'], ['608', '14', '148', '145', '132', '5'], ['639', '13', '92', '74', '73', '5'], ['643', '14', '120', '101', '100', '5'], ['629', '13', '101', '80', '80', '5'], ['515', '12', '85', '101', '139', '1'], ['516', '12', '75', '90', '126', '1'], ['530', '12', '80', '99', '141', '1'], ['514', '12', '85', '105', '153', '1'], ['513', '12', '71', '88', '126', '1'], ['514', '12', '96', '115', '160', '1'], ['513', '12', '86', '99', '138', '1'], ['521', '12', '69', '87', '130', '1'], ['513', '12', '59', '69', '96', '1'], ['514', '12', '76', '87', '121', '1'], ['505', '12', '59', '76', '107', '1'], ['506', '12', '88', '106', '147', '1'], ['515', '12', '83', '101', '149', '1'], ['505', '12', '76', '94', '136', '1'], ['508', '12', '82', '103', '145', '1'], ['500', '12', '95', '118', '169', '1'], ['514', '12', '69', '85', '126', '1'], ['538', '12', '56', '66', '94', '1'], ['519', '12', '51', '62', '90', '1'], ['511', '12', '74', '89', '125', '1'], ['502', '12', '99', '87', '103', '1'], ['499', '12', '103', '92', '106', '1'], ['492', '12', '108', '101', '117', '1'], ['532', '12', '28', '24', '31', '1'], ['511', '12', '56', '50', '79', '1'], ['491', '12', '80', '73', '109', '1'], ['493', '12', '115', '106', '155', '1'], ['493', '12', '64', '61', '93', '1'], ['507', '12', '59', '53', '88', '1'], ['490', '12', '77', '65', '102', '1'], ['485', '12', '85', '131', '153', '1'], ['494', '12', '71', '113', '127', '1'], ['476', '11', '94', '142', '159', '1'], ['504', '12', '35', '60', '80', '1']]

# This function prepares the training data by converting it to numpy arrays
def prepare_training_data(training_data):
    X = []  # Features
    y = []  # Labels
    for line in training_data:
        try:
            # Explicit type conversion
            count = float(line[0])
            rad = float(line[1])
            avg_b = float(line[2])
            avg_g = float(line[3])
            avg_r = float(line[4])
            class_label = int(line[5])
            
            # Validate data
            if all(not np.isnan(x) for x in [count, rad, avg_b, avg_g, avg_r]): # Check for NaN values
                X.append([count, rad, avg_b, avg_g, avg_r])                     # Append features
                y.append(class_label)                                           # Append labels
        except (ValueError, IndexError) as e:
            continue
            
    X = np.array(X, dtype=np.float64)   # Convert to numpy array
    y = np.array(y, dtype=np.int32)     # Convert to numpy array
    
    return X, y                         # Return features and labels

# This function creates and trains the classifier
def create_and_train_classifier(X, y):
    # Scale the features
    scaler = StandardScaler()               # Standard Scaler
    X_scaled = scaler.fit_transform(X)      # Fit and transform the features
    
    # Split the scaled data
    X_train, X_test, y_train, y_test = train_test_split(
        X_scaled, y, test_size=0.2, random_state=42         # 80% training, 20% testing
    )
    
    # Create and fit PCA
    pca = PCA(n_components=3)                   # 3 principal components
    X_train_pca = pca.fit_transform(X_train)    # Fit and transform training data
    
    # Train classifier
    clf = LogisticRegression(max_iter=1000)     # Logistic Regression
    clf.fit(X_train_pca, y_train)               # Fit the classifier
    
    return scaler, pca, clf                     # Return the trained models

def main():
    # Create src directory if it doesn't exist
    if not os.path.exists('src'):
        os.makedirs('src')
    
    # Prepare and train the model
    X, y = prepare_training_data(training_data)             # Prepare the training data
    scaler, pca, clf = create_and_train_classifier(X, y)    # Create and train the classifier
    
    # Save the trained models
    joblib.dump(scaler, 'src/scaler.joblib')
    joblib.dump(pca, 'src/pca.joblib')
    joblib.dump(clf, 'src/classifier.joblib')
    
    print("Models trained and saved successfully in the src folder.")

if __name__ == "__main__":
    main()